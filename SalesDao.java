package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.RevenueItem;

public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId("foo");
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */

        return getDummyRevenueItems();

    }


	/*
	 * The students code to fetch data from the database will be written here
	 * Query to fetch details of summary listing of revenue generated by a particular stock,
	 * stock type or customer must be implemented
	 * Store the revenue generated by an item in the amount attribute
	 */
    public List<RevenueItem> getSummaryListing(String searchKeyword) {
        List<RevenueItem> items = new ArrayList<>();

        String sql =
            "SELECT s.StockSymbol, s.StockName, s.StockType, a.AccountID, t.PricePerShare, t.DateTime, " +
            "       SUM(o.NumShares) AS TotalShares, " +
            "       SUM(o.NumShares * t.PricePerShare) AS Revenue " +
            "FROM orders o " +
            "JOIN trade tr ON o.OrderID = tr.OrderID " +
            "JOIN transaction t ON tr.TransactionID = t.TransactionID " +
            "JOIN stock s ON tr.StockSymbol = s.StockSymbol " +
            "JOIN account a ON tr.AccountID = a.AccountID " +
            "JOIN customer c ON a.CustomerID = c.CustomerID " +
            "JOIN person p ON c.CustomerID = p.SSN " +
            "WHERE o.OrderType = 'Buy' AND (" +
            "      s.StockName LIKE ? OR " +
            "      s.StockType LIKE ? OR " +
            "      p.FirstName LIKE ? OR " +
            "      p.LastName LIKE ? ) " +
            "GROUP BY s.StockSymbol, s.StockName, s.StockType, a.AccountID, t.PricePerShare, t.DateTime " +
            "ORDER BY Revenue DESC";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            String keywordPattern = "%" + searchKeyword + "%";
            ps.setString(1, keywordPattern);
            ps.setString(2, keywordPattern);
            ps.setString(3, keywordPattern);
            ps.setString(4, keywordPattern);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                RevenueItem item = new RevenueItem();
                item.setStockSymbol(rs.getString("StockSymbol"));
                item.setAccountId(rs.getString("AccountID"));
                item.setAmount(rs.getDouble("Revenue"));
                item.setNumShares(rs.getInt("TotalShares"));
                item.setPricePerShare(rs.getDouble("PricePerShare"));
                item.setDate(rs.getDate("DateTime")); // java.util.Date
                items.add(item);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return items;
    }


}
